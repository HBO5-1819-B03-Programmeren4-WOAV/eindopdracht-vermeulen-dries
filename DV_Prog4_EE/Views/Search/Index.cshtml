@model DV_Prog4_EE.Models.SearchViewModel
@{
    ViewData["Title"] = "Index";
}

<div>
            @using (Html.BeginForm("Index", "Search"))
            {
                @Html.DropDownList("Id", (SelectList)ViewBag.Values, new { onchange = "this.form.submit();" })
            }
        
</div>

<div class="col-md-2"></div>

<div class="text-center center-block col-md-8">
    <h1 class="panel">Search: </h1>

    <form asp-controller="Event" asp-action="Select" method="get">

        <label for="Query"></label>
        <input id="Query" name="Query" class="text-center" onkeyup="search()" />
    </form>
    <br />
    <div id="search">

    </div>
    <div id="search">
        @await Html.PartialAsync("_Search", Model)
    </div>
    <div asp-validation-summary="ModelOnly"></div>
    <a asp-controller="Main" asp-action="Index" class="btn btn-lg btn-default">Back</a>

</div>

<script>
    function search() {
        // Declare variables
        var a, i;
        var input = document.getElementById('Email');
        var filter = input.value.toUpperCase();
        var rows = document.getElementsByTagName("tr");

        // Loop through all list items, and hide those who don't match the search query

        $('tr').slice(1).each(function (index, element) {
            var nameElement = element.getElementsByTagName("p")[0];
            var name = nameElement.innerHTML.toUpperCase();

            if (name.indexOf(filter) > -1) {
                element.style.display = "";
            } else {
                element.style.display = "none";
            }

        });
    }
</script>